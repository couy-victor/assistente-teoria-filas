"""
Cliente Groq para o sistema Bosquinho
Integra√ß√£o com Llama 3.1 8B Instant para resolu√ß√£o de problemas M/M/1
VERS√ÉO UNIVERSAL: IA resolve QUALQUER problema de M/M/1
"""

import os
from typing import Dict, List, Optional
from groq import Groq
from dotenv import load_dotenv

# Carrega vari√°veis de ambiente
load_dotenv()


class GroqClient:
    """Cliente para intera√ß√£o com Groq API usando Llama 3.1 8B Instant"""

    def __init__(self):
        self.api_key = os.getenv("GROQ_API_KEY")
        if not self.api_key:
            raise ValueError("GROQ_API_KEY n√£o encontrada no arquivo .env")

        self.client = Groq(api_key=self.api_key)
        self.model = os.getenv("GROQ_MODEL", "llama-3.1-8b-instant")
        self.temperature = float(os.getenv("GROQ_TEMPERATURE", "0.1"))
        self.max_tokens = int(os.getenv("GROQ_MAX_TOKENS", "2000"))

    def enhance_calculation_explanation(self, calculation_result: Dict, user_question: str) -> str:
        """
        Usa Llama 3.1 8B para gerar explica√ß√µes matem√°ticas detalhadas
        """
        try:
            # Prepara o contexto para o modelo matem√°tico
            system_prompt = """IMPORTANTE: RESPONDA SEMPRE EM PORTUGU√äS BRASILEIRO!

Voc√™ √© o Bosquinho, um assistente especializado em Teoria das Filas M/M/1.
Voc√™ deve explicar c√°lculos matem√°ticos de forma clara e did√°tica, sempre mostrando:
1. O contexto do problema
2. As f√≥rmulas utilizadas
3. A substitui√ß√£o dos valores
4. O resultado final
5. A interpreta√ß√£o pr√°tica do resultado

Use emojis e formata√ß√£o markdown para tornar a explica√ß√£o mais amig√°vel.
LEMBRE-SE: SEMPRE EM PORTUGU√äS BRASILEIRO!"""

            user_prompt = f"""
            Pergunta do usu√°rio: {user_question}

            Resultado do c√°lculo: {calculation_result}

            Por favor, explique este resultado de forma did√°tica e completa, incluindo:
            - O que significa o resultado
            - Como foi calculado
            - Qual a interpreta√ß√£o pr√°tica
            - Se o sistema √© est√°vel ou n√£o (quando aplic√°vel)
            """

            response = self.client.chat.completions.create(
                model=self.model,
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_prompt}
                ],
                temperature=self.temperature,
                max_tokens=self.max_tokens
            )

            return response.choices[0].message.content

        except Exception as e:
            return self._generate_fallback_response(calculation_result)

    def solve_example_with_explanation(self, example_type: str, results: Dict) -> str:
        """
        Usa Llama 3.1 8B para explicar exemplos completos
        """
        try:
            system_prompt = """IMPORTANTE: RESPONDA SEMPRE EM PORTUGU√äS BRASILEIRO!

Voc√™ √© o Bosquinho, especialista em Teoria das Filas M/M/1.
Explique exemplos pr√°ticos de forma did√°tica, mostrando cada passo do c√°lculo
e a interpreta√ß√£o real do resultado.
LEMBRE-SE: SEMPRE EM PORTUGU√äS BRASILEIRO!"""

            if example_type == "airport_1":
                context = """
                EXEMPLO DO AEROPORTO 1:
                - Cen√°rio: Aeroporto com pista √∫nica para pouso
                - Taxa de chegada: Œª = 1/3 avi√µes por minuto (1 avi√£o a cada 3 minutos)
                - Taxa de atendimento: Œº = 1 avi√£o por minuto
                """
            elif example_type == "airport_2":
                context = """
                EXEMPLO DO AEROPORTO 2:
                - Cen√°rio: Aeroporto com pista de alta capacidade
                - Taxa de chegada: Œª = 1 avi√£o por minuto
                - Taxa de atendimento: Œº = 3 avi√µes por minuto
                """
            else:
                context = f"Exemplo {example_type} com os seguintes resultados:"

            user_prompt = f"""
            {context}

            Resultados calculados: {results}

            Por favor, explique este exemplo completo de forma did√°tica, incluindo:
            1. Descri√ß√£o do cen√°rio real
            2. Cada m√©trica calculada com sua f√≥rmula
            3. Interpreta√ß√£o pr√°tica de cada resultado
            4. Conclus√µes sobre o desempenho do sistema
            """

            response = self.client.chat.completions.create(
                model=self.model,
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_prompt}
                ],
                temperature=self.temperature,
                max_tokens=self.max_tokens
            )

            return response.choices[0].message.content

        except Exception as e:
            return self._generate_fallback_example_response(example_type, results)

    def solve_problem_with_context(self, user_question: str, context: str) -> str:
        """
        Resolve um problema espec√≠fico com contexto detalhado dos c√°lculos
        Espec√≠fico para problemas completos como o do aeroporto
        """
        try:
            system_prompt = """IMPORTANTE: RESPONDA SEMPRE EM PORTUGU√äS BRASILEIRO!

Voc√™ √© o Bosquinho, um assistente especializado em Teoria das Filas M/M/1.

TAREFA ESPEC√çFICA:
- Voc√™ recebeu um problema completo com TODOS os c√°lculos j√° realizados
- Precisa explicar a solu√ß√£o de forma did√°tica e completa
- Foque na interpreta√ß√£o pr√°tica dos resultados
- Explique cada m√©trica de forma clara
- Relacione com o contexto real do problema (aeroporto, avi√µes, etc.)

ESTRUTURA DA RESPOSTA:
1. üéØ Resumo do problema
2. üìä Par√¢metros identificados
3. üî¢ Resultados principais
4. üí° Interpreta√ß√£o pr√°tica
5. ‚úÖ Respostas espec√≠ficas √†s perguntas

LEMBRE-SE: SEMPRE EM PORTUGU√äS BRASILEIRO!"""

            user_prompt = f"""
PROBLEMA APRESENTADO PELO USU√ÅRIO:
{user_question}

CONTEXTO COMPLETO COM C√ÅLCULOS REALIZADOS:
{context}

Por favor, explique este problema de forma did√°tica e completa, respondendo especificamente √†s perguntas do usu√°rio. Use os resultados calculados para dar respostas precisas e educativas.

IMPORTANTE:
- Explique a diferen√ßa entre "avi√µes no sistema" (L) vs "avi√µes aguardando na fila" (Lq)
- Mostre as f√≥rmulas quando relevante
- Interpretar os resultados no contexto pr√°tico
- Responda especificamente √†s letras a), b), c) se houver
"""

            response = self.client.chat.completions.create(
                model=self.model,
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_prompt}
                ],
                temperature=self.temperature,
                max_tokens=self.max_tokens
            )

            return response.choices[0].message.content

        except Exception as e:
            # Fallback espec√≠fico para problemas com contexto
            return f"""üå≥ **Bosquinho aqui!**

Tive um problema t√©cnico, mas posso te ajudar com base no que calculei:

{context}

üí° **Interpreta√ß√£o b√°sica:**
- O problema envolve uma fila M/M/1 (aeroporto com pista √∫nica)
- Lq = n√∫mero m√©dio de avi√µes **aguardando** para pousar
- L = n√∫mero m√©dio de avi√µes **no sistema** (aguardando + pousando)

Voc√™ pode tentar novamente ou reformular sua pergunta!"""

    def solve_with_calculations(self, user_question: str, context: str) -> str:
        """
        IA explica problema quando j√° temos c√°lculos realizados
        """
        try:
            system_prompt = """IMPORTANTE: RESPONDA SEMPRE EM PORTUGU√äS BRASILEIRO!

Voc√™ √© o Bosquinho, especialista em Teoria das Filas M/M/1.

TAREFA: Voc√™ recebeu uma pergunta do usu√°rio e j√° foram feitos os c√°lculos principais.
Sua miss√£o √©:
1. Interpretar o problema apresentado pelo usu√°rio
2. Explicar os resultados calculados de forma did√°tica
3. Responder especificamente √†s perguntas feitas
4. Mostrar as f√≥rmulas relevantes
5. Dar interpreta√ß√£o pr√°tica dos resultados

ESTRUTURA IDEAL:
üéØ Resumo do problema
üìä Par√¢metros identificados
üî¢ C√°lculos e resultados
üí° Interpreta√ß√£o pr√°tica
‚úÖ Respostas espec√≠ficas

Use emojis, seja did√°tico e sempre em PORTUGU√äS BRASILEIRO!"""

            user_prompt = f"""
PERGUNTA DO USU√ÅRIO:
{user_question}

C√ÅLCULOS J√Å REALIZADOS:
{context}

Por favor, analise o problema do usu√°rio e explique de forma completa e did√°tica, usando os c√°lculos j√° realizados. Responda especificamente ao que foi perguntado, seja sobre n√∫mero m√©dio de clientes, tempos, probabilidades, etc.

IMPORTANTE: Relacione os resultados com o contexto real do problema (aeroporto, banco, empresa, etc.) se aplic√°vel.
"""

            response = self.client.chat.completions.create(
                model=self.model,
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_prompt}
                ],
                temperature=self.temperature,
                max_tokens=self.max_tokens
            )

            return response.choices[0].message.content

        except Exception as e:
            return f"""üå≥ **Bosquinho aqui!**

Tive um problema t√©cnico, mas calculei os resultados:

{context}

üí° Use estes valores para interpretar o problema!"""

    def solve_any_mm1_problem(self, user_question: str, context: Dict) -> str:
        """
        IA resolve QUALQUER problema de M/M/1 do zero - M√âTODO PRINCIPAL
        """
        try:
            system_prompt = """IMPORTANTE: RESPONDA SEMPRE EM PORTUGU√äS BRASILEIRO!

Voc√™ √© o Bosquinho, um assistente especializado em Teoria das Filas M/M/1.

CAPACIDADES:
- Interpretar QUALQUER problema de teoria das filas M/M/1
- Identificar par√¢metros Œª (taxa de chegada) e Œº (taxa de atendimento) no texto
- Calcular todas as m√©tricas: œÅ, L, Lq, W, Wq, P0, Pn, P(N>k)
- Explicar resultados de forma pr√°tica e did√°tica
- Resolver problemas completos com m√∫ltiplas perguntas

F√ìRMULAS M/M/1:
- œÅ = Œª/Œº (utiliza√ß√£o do sistema)
- L = œÅ/(1-œÅ) = Œª/(Œº-Œª) (n√∫mero m√©dio no sistema)
- Lq = œÅ¬≤/(1-œÅ) = Œª¬≤/[Œº(Œº-Œª)] (n√∫mero m√©dio na fila)
- W = 1/(Œº-Œª) (tempo m√©dio no sistema)
- Wq = œÅ/(Œº-Œª) = Œª/[Œº(Œº-Œª)] (tempo m√©dio na fila)
- P0 = 1-œÅ (probabilidade sistema vazio)
- Pn = (1-œÅ)œÅ‚Åø (probabilidade de n clientes)
- P(N>k) = œÅ·µè‚Å∫¬π (probabilidade de mais de k clientes)

PROCESSO:
1. Leia e compreenda o problema
2. Identifique Œª e Œº (taxas, intervalos, frequ√™ncias)
3. Calcule as m√©tricas necess√°rias
4. Responda √†s perguntas espec√≠ficas
5. D√™ interpreta√ß√£o pr√°tica

TIPOS DE PROBLEMAS:
- Aeroportos (avi√µes, pistas)
- Bancos (clientes, caixas)
- Empresas (pedidos, atendimento)
- Restaurantes (clientes, gar√ßons)
- Sistemas de TI (requisi√ß√µes, servidores)
- Qualquer fila de espera!

SEMPRE em PORTUGU√äS BRASILEIRO! Seja did√°tico, use emojis e explique o contexto real."""

            # Prepara informa√ß√µes do contexto
            context_info = ""
            if context.get("lambda"):
                context_info += f"- Lambda (Œª) identificado: {context['lambda']}\n"
            if context.get("mu"):
                context_info += f"- Mu (Œº) identificado: {context['mu']}\n"
            if context.get("numbers_found"):
                context_info += f"- N√∫meros encontrados no texto: {context['numbers_found']}\n"
            if context.get("is_complete_problem"):
                context_info += "- Detectado como problema completo\n"

            user_prompt = f"""
PROBLEMA A RESOLVER:
{user_question}

INFORMA√á√ïES COLETADAS:
{context_info if context_info else "Nenhuma informa√ß√£o espec√≠fica coletada - analise o texto completo."}

INSTRU√á√ïES:
1. Analise cuidadosamente o problema apresentado
2. Identifique os par√¢metros Œª e Œº (mesmo que impl√≠citos)
3. Calcule as m√©tricas necess√°rias usando as f√≥rmulas M/M/1
4. Responda especificamente √†s perguntas feitas
5. Explique de forma did√°tica e pr√°tica

IMPORTANTE: Se o problema mencionar tempos (ex: "a cada 3 minutos"), converta para taxas (ex: Œª = 1/3 por minuto). Se mencionar capacidades (ex: "pode atender 5 por hora"), isso √© Œº.

Resolva o problema completamente!"""

            response = self.client.chat.completions.create(
                model=self.model,
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_prompt}
                ],
                temperature=self.temperature + 0.1,  # Pouco mais criativo para resolu√ß√£o
                max_tokens=self.max_tokens + 500      # Mais tokens para problemas complexos
            )

            return response.choices[0].message.content

        except Exception as e:
            return f"""üå≥ **Bosquinho aqui!**

Tive um problema t√©cnico ao resolver o problema: {str(e)}

üí° **Dica:** Tente reformular sua pergunta incluindo:
- Taxa de chegada (Œª) - quantos chegam por unidade de tempo
- Taxa de atendimento (Œº) - quantos s√£o atendidos por unidade de tempo

**Exemplo:** "Em um banco, chegam 2 clientes por minuto e cada caixa atende 3 clientes por minuto. Qual o tempo m√©dio na fila?"
"""

    def general_help_response(self, user_question: str) -> str:
        """
        Usa Llama 3.1 8B para responder QUALQUER pergunta de forma inteligente
        """
        try:
            system_prompt = """IMPORTANTE: RESPONDA SEMPRE EM PORTUGU√äS BRASILEIRO!

Voc√™ √© o Bosquinho, um assistente especializado em Teoria das Filas M/M/1.

REGRAS OBRIGAT√ìRIAS:
1. SEMPRE responda em portugu√™s brasileiro
2. Se for SAUDA√á√ÉO (ol√°, oi, bom dia), seja caloroso e se apresente
3. Se for pergunta sobre M/M/1, explique didaticamente com exemplos
4. Se mencionarem "exemplo do aeroporto" SEM par√¢metros, explique os exemplos dispon√≠veis
5. Se pedirem c√°lculos COM Œª e Œº, fa√ßa os c√°lculos passo a passo
6. Se pedirem c√°lculos SEM Œª e Œº, pe√ßa os par√¢metros
7. Sempre seja educativo, use emojis e explique o contexto pr√°tico

LEMBRE-SE: PORTUGU√äS BRASILEIRO SEMPRE!

EXEMPLOS DISPON√çVEIS:
- Aeroporto 1: Œª=1/3, Œº=1 (pista √∫nica)
- Aeroporto 2: Œª=1, Œº=3 (alta capacidade)
- Banco: Œª=2, Œº=3 (caixa eletr√¥nico)
- Drive-thru: Œª=1.5, Œº=2 (restaurante)

F√ìRMULAS M/M/1:
- œÅ = Œª/Œº (utiliza√ß√£o)
- L = œÅ/(1-œÅ) (clientes no sistema)
- Lq = œÅ¬≤/(1-œÅ) (clientes na fila)
- W = 1/(Œº-Œª) (tempo no sistema)
- Wq = œÅ/(Œº-Œª) (tempo na fila)
- P0 = 1-œÅ (sistema vazio)
- Pn = (1-œÅ)œÅ‚Åø (n clientes)
- P(N>k) = œÅ·µè‚Å∫¬π (mais de k clientes)"""

            response = self.client.chat.completions.create(
                model=self.model,
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_question}
                ],
                temperature=self.temperature + 0.1,  # Ligeiramente mais criativo para ajuda geral
                max_tokens=self.max_tokens // 2  # Menos tokens para respostas gerais
            )

            return response.choices[0].message.content

        except Exception as e:
            return self._generate_fallback_help_response()

    def handle_error_with_context(self, user_question: str, error_context: str) -> str:
        """
        Usa Llama 3.1 8B para explicar erros de forma did√°tica
        """
        try:
            system_prompt = """IMPORTANTE: RESPONDA SEMPRE EM PORTUGU√äS BRASILEIRO!

Voc√™ √© o Bosquinho, especialista em Teoria das Filas M/M/1.
Explique erros de forma did√°tica e ajude o usu√°rio a corrigir o problema.
LEMBRE-SE: SEMPRE EM PORTUGU√äS BRASILEIRO!"""

            user_prompt = f"""
            Pergunta do usu√°rio: {user_question}
            Erro encontrado: {error_context}

            Por favor, explique o erro de forma did√°tica e sugira como corrigir.
            """

            response = self.client.chat.completions.create(
                model=self.model,
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_prompt}
                ],
                temperature=self.temperature,
                max_tokens=self.max_tokens // 2
            )

            return response.choices[0].message.content

        except Exception as e:
            return f"‚ùå **Erro:** {error_context}\n\nüí° **Dica:** Certifique-se de fornecer os valores corretos de Œª e Œº."



    def _generate_fallback_response(self, calculation_result: Dict) -> str:
        """Resposta de fallback quando Groq n√£o est√° dispon√≠vel"""
        if "description" in calculation_result:
            return f"üå≥ **Bosquinho aqui!** Calculei para voc√™:\n\nüìä **Resultado:** {calculation_result['description']}"
        return "üå≥ **Bosquinho aqui!** C√°lculo realizado com sucesso!"

    def _generate_fallback_example_response(self, example_type: str, results: Dict) -> str:
        """Resposta de fallback para exemplos"""
        return f"üå≥ **Bosquinho resolveu o exemplo {example_type}!**\n\nResultados calculados com sucesso."

    def _generate_fallback_help_response(self) -> str:
        """Resposta de fallback para ajuda geral"""
        return """üå≥ **Bosquinho aqui!**

Sou especializado em Teoria das Filas M/M/1. Posso ajudar com:
- C√°lculos de utiliza√ß√£o (œÅ)
- N√∫mero m√©dio de clientes (L, Lq)
- Tempos m√©dios (W, Wq)
- Probabilidades (P0, Pn, P(N>k))
- Exemplos pr√°ticos (aeroporto, banco, etc.)

Como posso ajud√°-lo?"""


# Inst√¢ncia global do cliente Groq
groq_client = GroqClient()