"""
N√≥s do grafo LangGraph para a assistente Milanesa - VERS√ÉO COM CONTEXTO MELHORADO
A IA resolve QUALQUER problema de M/M/1 E MANT√âM CONTEXTO
"""

import re
from typing import Dict, Any
from models.state import MilanesaState
from utils.mm1_calculator import MM1Calculator


def is_followup_question(message: str) -> bool:
    """
    Detecta se a mensagem √© uma pergunta de follow-up que referencia algo anterior
    """
    message_lower = message.lower().strip()
    
    # Palavras que indicam refer√™ncia ao contexto anterior
    followup_indicators = [
        'isso', 'isto', 'essa', 'esta', 'esse', 'este',
        'explique melhor', 'detalhe', 'me explique',
        'como assim', 'n√£o entendi', 'pode explicar',
        'exemplifique', 'exemplo', 'mostre',
        'e se', 'mas e', 'por√©m',
        'anterior', 'problema anterior', 'c√°lculo anterior',
        'resultado', 'resposta', 'solu√ß√£o',
        'did√°tico', 'did√°tica', 'mais claro',
        'passo a passo', 'detalhado'
    ]
    
    # Verifica se √© uma pergunta curta (geralmente follow-ups s√£o mais curtos)
    is_short = len(message.split()) <= 10
    
    # Verifica se cont√©m indicadores de follow-up
    has_followup_words = any(indicator in message_lower for indicator in followup_indicators)
    
    # Verifica se N√ÉO cont√©m n√∫meros (novos problemas geralmente t√™m n√∫meros)
    has_numbers = bool(re.search(r'\d+', message))
    
    # Verifica se N√ÉO cont√©m palavras de novo problema
    new_problem_words = ['problema', 'exerc√≠cio', 'empresa', 'aeroporto', 'banco', 'chegam', 'atende']
    has_new_problem_words = any(word in message_lower for word in new_problem_words)
    
    result = (is_short and has_followup_words) or (has_followup_words and not has_numbers and not has_new_problem_words)
    
    print(f"üîç DEBUG FOLLOWUP - Mensagem: '{message[:50]}...'")
    print(f"üîç DEBUG FOLLOWUP - √â curta: {is_short}, Tem indicadores: {has_followup_words}, Tem n√∫meros: {has_numbers}")
    print(f"üîç DEBUG FOLLOWUP - RESULTADO: {'FOLLOWUP' if result else 'NOVO PROBLEMA'}")
    
    return result


def extract_last_problem_context(state: MilanesaState) -> Dict:
    """
    Extrai o contexto do √∫ltimo problema resolvido das mensagens anteriores
    """
    context = {
        "last_problem": None,
        "last_solution": None,
        "last_parameters": {},
        "conversation_summary": ""
    }
    
    if not state.get("messages") or len(state["messages"]) < 2:
        return context
    
    try:
        # Procura pela √∫ltima resposta da Milanesa que cont√©m um problema resolvido
        for i in range(len(state["messages"]) - 1, -1, -1):
            msg = state["messages"][i]
            
            if isinstance(msg, dict):
                role = msg.get("role", "")
                content = msg.get("content", "")
            else:
                # Alterna entre user e assistant baseado na posi√ß√£o
                role = "assistant" if i % 2 == 1 else "user"
                content = str(msg.content) if hasattr(msg, 'content') else str(msg)
            
            # Se √© resposta da Milanesa e cont√©m c√°lculos/resultados
            if role == "assistant" and any(keyword in content.lower() for keyword in 
                ['Œª', 'mu', 'rho', 'utiliza√ß√£o', 'tempo m√©dio', 'n√∫mero m√©dio', 'probabilidade']):
                
                context["last_solution"] = content
                print(f"‚úÖ DEBUG CONTEXT - √öltima solu√ß√£o encontrada: {len(content)} chars")
                
                # Procura a pergunta correspondente (mensagem anterior do usu√°rio)
                if i > 0:
                    prev_msg = state["messages"][i-1]
                    if isinstance(prev_msg, dict):
                        context["last_problem"] = prev_msg.get("content", "")
                    else:
                        context["last_problem"] = str(prev_msg.content) if hasattr(prev_msg, 'content') else str(prev_msg)
                    
                    print(f"‚úÖ DEBUG CONTEXT - √öltimo problema encontrado: {context['last_problem'][:100]}...")
                
                # Extrai par√¢metros da solu√ß√£o anterior
                lambda_match = re.search(r'Œª.*?=.*?(\d+(?:\.\d+)?(?:/\d+)?)', content.lower())
                if lambda_match:
                    context["last_parameters"]["lambda"] = lambda_match.group(1)
                
                mu_match = re.search(r'Œº.*?=.*?(\d+(?:\.\d+)?(?:/\d+)?)', content.lower())
                if mu_match:
                    context["last_parameters"]["mu"] = mu_match.group(1)
                
                break
        
        # Constr√≥i resumo da conversa (√∫ltimas 3 trocas)
        recent_messages = []
        for i in range(max(0, len(state["messages"]) - 6), len(state["messages"])):
            msg = state["messages"][i]
            if isinstance(msg, dict):
                role = msg.get("role", "user")
                content = msg.get("content", "")
            else:
                role = "assistant" if i % 2 == 1 else "user"
                content = str(msg.content) if hasattr(msg, 'content') else str(msg)
            
            speaker = "USU√ÅRIO" if role == "user" else "MILANESA"
            recent_messages.append(f"{speaker}: {content[:200]}")
        
        context["conversation_summary"] = "\n\n".join(recent_messages)
        
    except Exception as e:
        print(f"‚ùå DEBUG CONTEXT - Erro ao extrair contexto: {e}")
    
    return context


def safe_float_conversion(value_str: str, context: str = "unknown") -> float:
    """Converte string para float de forma segura, com logging detalhado"""
    try:
        clean_str = value_str.strip()
        print(f"üîç DEBUG - Convertendo '{clean_str}' para float (contexto: {context})")
        
        clean_str = re.sub(r'[^\d./]', '', clean_str)
        
        if not clean_str or clean_str in ['.', '/']:
            raise ValueError(f"String vazia ap√≥s limpeza: '{value_str}' -> '{clean_str}'")
        
        if '/' in clean_str:
            parts = clean_str.split('/')
            if len(parts) == 2 and parts[0] and parts[1]:
                result = float(parts[0]) / float(parts[1])
            else:
                raise ValueError(f"Fra√ß√£o inv√°lida: '{clean_str}'")
        else:
            if not re.match(r'^\d+\.?\d*$', clean_str):
                raise ValueError(f"Formato num√©rico inv√°lido: '{clean_str}'")
            result = float(clean_str)
        
        print(f"‚úÖ DEBUG - Convers√£o bem-sucedida: '{value_str}' -> {result}")
        return result
        
    except Exception as e:
        print(f"‚ùå DEBUG - Erro na convers√£o float: '{value_str}' (contexto: {context}) -> {e}")
        raise ValueError(f"Erro ao converter '{value_str}' para float: {e}")


def extract_parameters(state: MilanesaState) -> MilanesaState:
    """Extrai par√¢metros b√°sicos - AGORA COM DETEC√á√ÉO DE FOLLOW-UP"""
    try:
        if not state.get("messages"):
            return state

        last_message = state["messages"][-1]

        # Extrai o conte√∫do da mensagem
        try:
            if isinstance(last_message, dict):
                content = last_message.get("content", "")
            elif hasattr(last_message, 'content'):
                content = str(last_message.content)
            else:
                content = str(last_message)
        except Exception as e:
            print(f"‚ö†Ô∏è DEBUG - Erro ao extrair conte√∫do: {e}")
            content = ""

        print(f"üîç DEBUG EXTRACT - Processando: '{content[:50]}...'")

        # üîß NOVA FUNCIONALIDADE: Detecta se √© follow-up
        if is_followup_question(content):
            state["is_followup"] = True
            state["followup_context"] = extract_last_problem_context(state)
            print("‚úÖ DEBUG EXTRACT - FOLLOW-UP detectado, contexto extra√≠do")
            return state

        # Para mensagens simples (sauda√ß√µes), pula processamento num√©rico
        simple_messages = ['ola', 'ol√°', 'oi', 'oii', 'hello', 'hi', 'bom dia', 'boa tarde', 'boa noite']
        if content.lower().strip() in simple_messages:
            print("‚úÖ DEBUG EXTRACT - Mensagem simples detectada, pulando extra√ß√£o num√©rica")
            return state

        # EXTRA√á√ÉO GEN√âRICA - pega n√∫meros que possam ser par√¢metros
        content_lower = content.lower()

        # Detecta se √© um problema/exerc√≠cio completo
        problem_keywords = [
            'problema', 'exerc√≠cio', 'quest√£o', 'exemplo', 'calcule', 'determine',
            'encontre', 'resolva', 'qual', 'aeroporto', 'banco', 'fila', 'sistema',
            'empresa', 'loja', 'cliente', 'atendimento', 'servidor', 'padaria'
        ]

        if any(keyword in content_lower for keyword in problem_keywords):
            state["is_complete_problem"] = True

        # Extra√ß√£o de n√∫meros do texto
        all_numbers = []
        number_pattern = r'\b\d+(?:\.\d+)?(?:/\d+(?:\.\d+)?|:\d+(?:\.\d+)?)?\b'
        matches = re.findall(number_pattern, content)
        
        print(f"üîç DEBUG EXTRACT - Matches encontrados: {matches}")
        
        for i, match in enumerate(matches):
            try:
                print(f"üîç DEBUG EXTRACT - Processando match {i}: '{match}'")
                value = safe_float_conversion(match, f"number_extraction_{i}")
                
                if 0 <= value <= 10000:
                    all_numbers.append(value)
                    print(f"‚úÖ DEBUG EXTRACT - N√∫mero v√°lido adicionado: {value}")
                else:
                    print(f"‚ö†Ô∏è DEBUG EXTRACT - N√∫mero fora do range: {value}")

            except Exception as e:
                print(f"‚ö†Ô∏è DEBUG EXTRACT - Erro na convers√£o do match '{match}': {e}")
                continue

        # Tenta identificar Œª e Œº
        lambda_keywords = ['lambda', 'Œª', 'chegada', 'arrival', 'entrada']
        mu_keywords = ['mu', 'Œº', 'atendimento', 'service', 'sa√≠da', 'processamento']

        for keyword in lambda_keywords:
            pattern = rf'{keyword}[^0-9]*?(\d+(?:\.\d+)?(?:/\d+)?)'
            match = re.search(pattern, content_lower)
            if match:
                value_str = match.group(1)
                try:
                    print(f"üîç DEBUG EXTRACT - Tentando extrair lambda de: '{value_str}'")
                    state["lambda_rate"] = safe_float_conversion(value_str, "lambda_extraction")
                    print(f"‚úÖ DEBUG EXTRACT - Lambda extra√≠do: {state['lambda_rate']}")
                    break
                except Exception as e:
                    print(f"‚ö†Ô∏è DEBUG EXTRACT - Lambda inv√°lido ignorado: '{value_str}' -> {e}")
                    continue

        for keyword in mu_keywords:
            pattern = rf'{keyword}[^0-9]*?(\d+(?:\.\d+)?(?:/\d+)?)'
            match = re.search(pattern, content_lower)
            if match:
                value_str = match.group(1)
                try:
                    print(f"üîç DEBUG EXTRACT - Tentando extrair mu de: '{value_str}'")
                    state["mu_rate"] = safe_float_conversion(value_str, "mu_extraction")
                    print(f"‚úÖ DEBUG EXTRACT - Mu extra√≠do: {state['mu_rate']}")
                    break
                except Exception as e:
                    print(f"‚ö†Ô∏è DEBUG EXTRACT - Mu inv√°lido ignorado: '{value_str}' -> {e}")
                    continue

        if not state.get("lambda_rate") and not state.get("mu_rate") and all_numbers:
            state["found_numbers"] = all_numbers[:5]
            print(f"‚úÖ DEBUG EXTRACT - N√∫meros salvos para IA: {state['found_numbers']}")

        print(f"‚úÖ DEBUG EXTRACT - Estado final: lambda={state.get('lambda_rate')}, mu={state.get('mu_rate')}, numbers={state.get('found_numbers')}")
        
        return state

    except Exception as e:
        print(f"‚ùå DEBUG EXTRACT - Erro geral na extra√ß√£o: {e}")
        return state


def identify_calculation_type(state: MilanesaState) -> MilanesaState:
    """Identifica tipo de c√°lculo - AGORA COM CONTEXTO"""
    if not state.get("messages"):
        return state

    # üîß NOVA PRIORIDADE 0: Se √© follow-up, usa contexto anterior
    if state.get("is_followup"):
        state["calculation_result"] = {"type": "ai_followup_with_context"}
        print("‚úÖ DEBUG IDENTIFY - Tipo: ai_followup_with_context")
        return state

    # PRIORIDADE 1: Se √© um problema completo, deixa a IA resolver tudo
    if state.get("is_complete_problem"):
        state["calculation_result"] = {"type": "ai_solve_complete"}
        print("‚úÖ DEBUG IDENTIFY - Tipo: ai_solve_complete")
        return state

    # PRIORIDADE 2: Se tem Œª e Œº claros, faz c√°lculos e deixa IA explicar
    if state.get("lambda_rate") is not None and state.get("mu_rate") is not None:
        state["calculation_result"] = {"type": "calculate_and_explain"}
        print(f"‚úÖ DEBUG IDENTIFY - Tipo: calculate_and_explain (Œª={state.get('lambda_rate')}, Œº={state.get('mu_rate')})")
        return state

    # PRIORIDADE 3: Se tem n√∫meros mas n√£o sabe o que s√£o, deixa IA descobrir
    if state.get("found_numbers"):
        state["calculation_result"] = {"type": "ai_interpret_numbers"}
        print(f"‚úÖ DEBUG IDENTIFY - Tipo: ai_interpret_numbers (n√∫meros: {state.get('found_numbers')})")
        return state

    # PRIORIDADE 4: Qualquer outra coisa, IA resolve
    state["calculation_result"] = {"type": "ai_general"}
    print("‚úÖ DEBUG IDENTIFY - Tipo: ai_general")
    return state


def perform_calculation(state: MilanesaState) -> MilanesaState:
    """Executa c√°lculos quando poss√≠vel - vers√£o focada"""
    if not state.get("calculation_result"):
        return state

    calc_type = state["calculation_result"].get("type")
    print(f"üîç DEBUG CALC - Tipo de c√°lculo: {calc_type}")

    # Para follow-ups, n√£o faz novos c√°lculos
    if calc_type == "ai_followup_with_context":
        print("‚úÖ DEBUG CALC - Follow-up: pulando c√°lculos, usando contexto anterior")
        return state

    # √öNICA situa√ß√£o onde fazemos c√°lculos: quando temos Œª e Œº claros
    if calc_type == "calculate_and_explain":
        if state.get("lambda_rate") is not None and state.get("mu_rate") is not None:
            calculator = MM1Calculator()

            try:
                print(f"üîç DEBUG CALC - Iniciando c√°lculos com Œª={state['lambda_rate']}, Œº={state['mu_rate']}")
                
                lambda_val = float(state["lambda_rate"])
                mu_val = float(state["mu_rate"])
                
                if lambda_val < 0 or mu_val <= 0:
                    raise ValueError(f"Par√¢metros inv√°lidos: Œª={lambda_val}, Œº={mu_val}")
                
                if lambda_val >= mu_val:
                    print(f"‚ö†Ô∏è DEBUG CALC - Sistema inst√°vel detectado: œÅ = {lambda_val/mu_val}")
                
                # Calcula TODAS as m√©tricas principais
                results = {}
                results["rho"] = calculator.calculate_rho(lambda_val, mu_val)
                results["L"] = calculator.calculate_L(lambda_val, mu_val)
                results["Lq"] = calculator.calculate_Lq(lambda_val, mu_val)
                results["W"] = calculator.calculate_W(lambda_val, mu_val)
                results["Wq"] = calculator.calculate_Wq(lambda_val, mu_val)
                results["P0"] = calculator.calculate_P0(lambda_val, mu_val)

                results["lambda"] = lambda_val
                results["mu"] = mu_val

                state["calculation_result"].update(results)
                print(f"‚úÖ DEBUG CALC - C√°lculos conclu√≠dos com sucesso")

            except Exception as e:
                error_msg = f"Erro no c√°lculo: {str(e)}"
                print(f"‚ùå DEBUG CALC - {error_msg}")
                state["error_message"] = error_msg

    else:
        print(f"‚úÖ DEBUG CALC - Tipo {calc_type} ser√° tratado pela IA")

    return state


def generate_response(state: MilanesaState) -> MilanesaState:
    """Gera resposta usando IA - VERS√ÉO COM CONTEXTO MELHORADO"""
    from utils.groq_client import groq_client

    # Extrai TODA a conversa para manter contexto
    conversation_history = ""
    current_question = ""

    if state.get("messages"):
        try:
            # Constr√≥i hist√≥rico completo da conversa
            for i, msg in enumerate(state["messages"]):
                if isinstance(msg, dict):
                    role = msg.get("role", "user")
                    content = msg.get("content", "")
                elif hasattr(msg, 'content'):
                    role = "user" if i % 2 == 0 else "assistant"
                    content = str(msg.content)
                else:
                    role = "user"
                    content = str(msg)

                if role == "user":
                    conversation_history += f"USU√ÅRIO: {content}\n\n"
                    current_question = content
                else:
                    conversation_history += f"MILANESA: {content}\n\n"

        except Exception as e:
            print(f"‚ö†Ô∏è DEBUG RESPONSE - Erro ao construir hist√≥rico: {e}")
            current_question = ""

    print(f"üîç DEBUG RESPONSE - Preparando resposta...")

    try:
        if groq_client is None:
            raise Exception("GroqClient n√£o inicializado corretamente")

        # Se h√° erro, trata o erro
        if state.get("error_message"):
            print(f"‚ö†Ô∏è DEBUG RESPONSE - Tratando erro: {state['error_message']}")
            response = groq_client.handle_error_with_context(current_question, state['error_message'])

        # üîß NOVA FUNCIONALIDADE: Tratamento especial para follow-ups
        elif state.get("calculation_result", {}).get("type") == "ai_followup_with_context":
            print("‚úÖ DEBUG RESPONSE - Processando FOLLOW-UP com contexto")
            
            followup_context = state.get("followup_context", {})
            
            # Monta contexto rico para follow-up
            context_text = f"""
CONTEXTO DA CONVERSA ANTERIOR:

√öLTIMO PROBLEMA RESOLVIDO:
{followup_context.get('last_problem', 'N√£o encontrado')}

√öLTIMA SOLU√á√ÉO FORNECIDA:
{followup_context.get('last_solution', 'N√£o encontrada')}

PAR√ÇMETROS UTILIZADOS:
{followup_context.get('last_parameters', {})}

HIST√ìRICO RECENTE:
{followup_context.get('conversation_summary', '')}
"""
            
            response = groq_client.answer_followup_question(current_question, context_text)

        # Se calculamos m√©tricas, passa resultados para IA explicar
        elif state.get("calculation_result") and state["calculation_result"].get("type") == "calculate_and_explain":
            print("‚úÖ DEBUG RESPONSE - IA explicar√° c√°lculos realizados")

            calc_result = state["calculation_result"]
            context = f"""
C√ÅLCULOS REALIZADOS:

Par√¢metros:
- Œª (taxa de chegada) = {calc_result.get('lambda')}
- Œº (taxa de atendimento) = {calc_result.get('mu')}

Resultados:
- œÅ (utiliza√ß√£o) = {calc_result.get('rho', {}).get('value', 'Erro')}
- L (clientes no sistema) = {calc_result.get('L', {}).get('value', 'Erro')}
- Lq (clientes na fila) = {calc_result.get('Lq', {}).get('value', 'Erro')}
- W (tempo no sistema) = {calc_result.get('W', {}).get('value', 'Erro')}
- Wq (tempo na fila) = {calc_result.get('Wq', {}).get('value', 'Erro')}
- P0 (probabilidade sistema vazio) = {calc_result.get('P0', {}).get('value', 'Erro')}

Status do sistema: {'Est√°vel' if calc_result.get('rho', {}).get('value', 1) < 1 else 'Inst√°vel'}
"""

            full_context = f"HIST√ìRICO DA CONVERSA:\n{conversation_history}\n\nC√ÅLCULOS REALIZADOS:\n{context}"
            response = groq_client.solve_with_calculations(current_question, full_context)

        # Para TODOS os outros casos, IA resolve do zero
        else:
            print("‚úÖ DEBUG RESPONSE - IA resolver√° problema do zero")

            context = {}
            if state.get("lambda_rate"):
                context["lambda"] = state["lambda_rate"]
            if state.get("mu_rate"):
                context["mu"] = state["mu_rate"]
            if state.get("found_numbers"):
                context["numbers_found"] = state["found_numbers"]
            if state.get("is_complete_problem"):
                context["is_complete_problem"] = True

            context["conversation_history"] = conversation_history
            response = groq_client.solve_any_mm1_problem(current_question, context)

    except Exception as e:
        print(f"‚ùå DEBUG RESPONSE - Erro: {e}")
        response = f"""üçñ **Milanesa aqui!**

Tive um problema t√©cnico: {str(e)}

üí° **Sugest√µes:**
1. Verifique se o arquivo .env est√° configurado corretamente
2. Certifique-se de que GROQ_TEMPERATURE n√£o tem caracteres extras
3. Tente reformular sua pergunta"""

    if "messages" not in state:
        state["messages"] = []
    state["messages"].append({"role": "assistant", "content": response})

    print(f"‚úÖ DEBUG RESPONSE - Resposta gerada: {len(response)} chars")
    return state